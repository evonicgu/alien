# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Debug, latest MSVC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 5. <Linux, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 6. <Linux, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      # 7. <MacOS, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 8. <MacOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 9. <MacOS, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 10. <MacOS, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install lcov
        run: sudo apt update && sudo apt install lcov
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DALIEN_BUILD_TESTS=ON
          -DCMAKE_CXX_FLAGS=--coverage
          -DCMAKE_C_FLAGS=--coverage
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Gather coverage
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: lcov --capture --directory . | sed s@^SF:%s/@SF:@ > lcov.info
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
          parallel: true
          measure: true

  finish:
    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          measure: true
          parallel-finished: true