#include <vector>
{% for code in code_headers %}{{ bytes(code) }}{% endfor %}
namespace {{ bytes(parser_namespace) }} {

    struct grammar_symbol {
        std::ptrdiff_t index;

        std::size_t state;

        void* data;
    };
{% for code in code_decl %}{{ bytes(code) }}{% endfor %}
    using symbol_t = {{ bytes(symbol_type) }};

    static const bool err_states[{{ length(shift_err_states) }}]{#{}#{% for is_err in shift_err_states %}{{ is_err }}{% if not loop.is_last %}, {% endif %}{% endfor %}};

    {% if not monomorphic %}template<typename Stream>
    {% endif %}class parser {
        std::vector<grammar_symbol> symbols;

        grammar_symbol lookahead{-1, 0, nullptr}, rule_lookahead{-1, 0, nullptr};

        grammar_symbol saved_symbol;

        std::size_t err_state;{% if track_lines %}
        {{ bytes(lexer_relative_namespace) }}pos_t err_pos;{% endif %}
        std::ptrdiff_t err_lookahead = lookahead.index;

        bool in_error = false;

        {{ bytes(lexer_relative_namespace) }}lexer{% if not monomorphic %}<Stream>{% endif %}& l;

    public:{% for code in code_content_decl_public %}{{ bytes(code) }}{% endfor %}
    private:{% for code in code_content_decl_private %}{{ bytes(code) }}{% endfor %}
    public:{% if not no_default_constructor %}
        explicit parser({{ bytes(lexer_relative_namespace) }}lexer{% if not monomorphic %}<Stream>{% endif %}& l)
            : l(l) {
            symbols.push_back(lookahead);

            {{ bytes(lexer_relative_namespace) }}token_t* token = l.lex();

            if (token != nullptr) {
                lookahead.index = (std::ptrdiff_t) token->type;
            } else {
                lookahead.index = -2;
            }

            lookahead.data = token;
        }
{% endif %}
        {% set start_rule_type = bytes(at(types, start_rule)) %}{{ start_rule_type }}* parse();
{% if not custom_error or default_token_to_str %}
    private:{% endif %}{% if not custom_error %}
        void error(std::size_t, std::ptrdiff_t{% if use_token_to_str %} got{% endif %});{% endif %}{% if default_token_to_str %}{% if not custom_error %}
        {% endif %}
        const char* token_to_str(std::ptrdiff_t terminal);
        {% endif %}
        void unwind_stack();
    };{% if not is_header_only %}

}{% endif %}{% if not is_header_only %}{% set prefix = bytes(guard_prefix) %}{% if length(prefix) != 0 %}

#endif // {{ prefix }}_GEN_PARSER{% endif %}{% endif %}